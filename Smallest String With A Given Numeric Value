class Solution {
    public String getSmallestString(int n, int k) {
        Stack<Character> stack = new Stack<>();
        for (int i = n; i > 0; --i) {
            for (int j = 25; j >= 0; --j) {//
                if (k - j - n >= 0) {
                    k -= j;
                    stack.add((char)(j + 'a'));
                    break;
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()) {
            sb.append(stack.pop());
        }

        return sb.toString();
    }
}

class Solution {
    public String getSmallestString(int n, int k) {
        Stack<Character> stack = new Stack<>();
        while(k - 26 >= n - 1) {
            stack.add('z');
            n--;
            k -= 26;
        }
        if (k != 0) {
            stack.add((char)(k - n + 'a') );
            n--;
        }
        for (int i = 0; i < n; ++i) {
            stack.add('a');
        }
        
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()) {
            sb.append(stack.pop());
        }

        return sb.toString();
    }
}

class Solution {
    public String getSmallestString(int n, int k) {
        char [] charArr = new char [n];
        int idx = n - 1;
        Stack<Character> stack = new Stack<>();
        while(k - 26 >= n - 1) {
            charArr[idx--] = 'z';
            n--;
            k -= 26;
        }
        if (k != 0) {
            charArr[idx--] = (char)(k - n + 'a');
            n--;
        }
        for (int i = 0; i < n; ++i) {
            charArr[idx--] = 'a';
        }
        return new String(charArr);
    }
}
