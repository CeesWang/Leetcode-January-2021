class Solution {
    public int minimumEffortPath(int[][] heights) {
        int rowLen = heights.length;
        int colLen = heights[0].length;
        boolean [][] visited = new boolean[rowLen][colLen]; 
        int [] ans = new int[1];
        ans[0] = Integer.MAX_VALUE;
        dfs(heights, visited, ans, 0, 0, Integer.MIN_VALUE);
        return ans[0] == Integer.MIN_VALUE ? 0 : ans[0];
    }
    
    public void dfs(int [][] heights, boolean [][] visited, int [] ans, int row, int col, int diff) {
        if (visited[row][col] || diff >= ans[0]) return;
        if (row == heights.length - 1 && col == heights[0].length - 1) {
            ans[0] = Math.min(ans[0], diff);
            return;
        }
        visited[row][col] = true;
        if (row + 1 < heights.length) {
            int absVal = Math.abs(heights[row + 1][col] - heights[row][col]);
            dfs(heights, visited, ans, row + 1, col, Math.max(diff, absVal));
        }
        if (row - 1 >= 0) {
            int absVal = Math.abs(heights[row - 1][col] - heights[row][col]);
            dfs(heights, visited, ans, row - 1, col, Math.max(diff, absVal));
        }
        if (col + 1 < heights[0].length) {
            int absVal = Math.abs(heights[row][col + 1] - heights[row][col]);
            dfs(heights, visited, ans, row, col + 1, Math.max(diff, absVal));
        }
        if (col - 1 >= 0) {
            int absVal = Math.abs(heights[row][col - 1] - heights[row][col]);
            dfs(heights, visited, ans, row, col - 1, Math.max(diff, absVal));
        }
        visited[row][col] = false;
    }
}
