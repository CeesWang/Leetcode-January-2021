class Solution {
    public int minOperations(int[] nums, int x) {
        Queue<int []> queue = new LinkedList<>();
        int level = 0;
        queue.add(new int [] {0, nums.length - 1, x});
        while (!queue.isEmpty()) {
            int size = queue.size();
            level++;
            for (int i = 0; i < size; ++i) {
                int [] op = queue.poll();
                int leftNum = nums[op[0]];
                int rightNum = nums[op[1]];
                if (op[2] == leftNum || op[2] == rightNum) return level;
                if (op[0] + 1 <= op[1] || op[1] - 1  >= op[1]) {
                    if (op[2] - leftNum > 0 ) {
                        queue.add(new int [] {op[0] + 1, op[1], op[2] - leftNum});
                    }
                    if (op[2] - rightNum > 0 ) {
                        queue.add(new int [] {op[0], op[1] - 1, op[2] - rightNum});
                    }
                } 
            }
        }
        return -1;
    }
}

class Solution {
    public int minOperations(int[] nums, int x) {
        int sum = 0;
        for (int num : nums) {
            sum += num;  
        } 
        if (sum == x) return nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int ans = -1;  
        map.put(0, -1);
        x = sum - x;
        sum = 0;

        for (int i = 0; i < nums.length; ++i) {
            sum += nums[i];
            if (map.containsKey(sum - x)) {
                ans = Math.max(ans, i - map.get(sum - x));
            }
            map.put(sum, i);
        }
        return ans == -1 ? -1 : nums.length - ans;
    }
}
